PROGRAM_VERSION = '1.0.0'

print(f'Malware Sacnner Version {PROGRAM_VERSION}')

import time
import os
import datetime
import requests
import clamd
import traceback

# Parse command line arguments
import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--apiurl', type=str, action='store', required=True, help='Root URL of the API of the forensic task bridge to use, e.g. https://hilderonny.github.io/forensictaskbridge/api/')
parser.add_argument('--sharepath', type=str, action='store', required=True, help='Directory path where the media files to process are accessible.')
parser.add_argument('--clamdip', type=str, action='store', required=True, help='IP address of the ClamD server (127.0.0.1)')
parser.add_argument('--clamdport', type=str, action='store', required=True, help='Port of the ClamD server (3310)')
parser.add_argument('--version', '-v', action='version', version=PROGRAM_VERSION)
args = parser.parse_args()

# Check access to directories
import sys
import os
APIURL = args.apiurl
if not APIURL.endswith("/"):
    APIURL = f"{APIURL}/"
print(f'Using API URL {APIURL}')
SHAREPATH = args.sharepath
if not os.access(SHAREPATH, os.R_OK | os.W_OK):
    sys.exit(f'ERROR: Cannot read share path {SHAREPATH}')
print(f'Using share path {SHAREPATH}')

# Open ClamD connection
CLAMDIP = args.clamdip
CLAMDPORT = args.clamdport
print(f'Using ClamD Server {CLAMDIP}:{CLAMDPORT}')
cd = clamd.ClamdNetworkSocket()
cd.__init__(host=CLAMDIP, port=CLAMDPORT, timeout=None)

def process_file(file_path):
    start_time = datetime.datetime.now()
    result = {}
    try:
        print('Processing file ' + file_path)
        print("EINS")
        clamd_response = cd.scan(file_path)
        print("ZWEI")
        print(clamd_response)
        clamd_result = next(iter(clamd_response.values()))
        print(clamd_result)

        result["status"] = clamd_result[0]
        if (clamd_result[0] == "FOUND"):
            result["virus"] = clamd_result[1]
    except Exception as ex:
        traceback.print_exc()
        print(ex)
        result['error'] = str(ex)
    end_time = datetime.datetime.now()
    result['duration'] = (end_time - start_time).total_seconds()
    return result

def check_and_process_files():

    url = f"{APIURL}tasks/scanforvirus/take/clamav/"
    print(url)
    req = requests.get(url)
    print(req)
    if req.status_code == 400:
        error = req.json()["error"]
        print(error)
        return False
    elif not req.status_code == 200:
        return False
    data = req.json()
    print(data)
    processing_file_path = os.path.join(SHAREPATH, data["filename"])
    result = process_file(processing_file_path)
    print(result)
    print('Reporting result')
    report_req = requests.post(f"{APIURL}tasks/scanforvirus/reportcompletion/{data['id']}/", json=result)
    if report_req.status_code != 200:
        print(req.text)
    print('Done')
    return True

try:
    print('Ready and waiting for action')
    while True:
        file_was_processed = False
        try:
            file_was_processed = check_and_process_files()
        except Exception as ex:
            print(ex)
        if file_was_processed == False:
            time.sleep(3)
except Exception:
    pass
